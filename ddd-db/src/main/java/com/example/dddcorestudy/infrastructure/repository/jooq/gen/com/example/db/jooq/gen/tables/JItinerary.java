/*
 * This file is generated by jOOQ.
 */
package com.example.db.jooq.gen.tables;


import com.example.db.jooq.gen.Indexes;
import com.example.db.jooq.gen.JDddSample;
import com.example.db.jooq.gen.Keys;
import com.example.db.jooq.gen.tables.records.ItineraryRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JItinerary extends TableImpl<ItineraryRecord> {

    private static final long serialVersionUID = -1602162325;

    /**
     * The reference instance of <code>ddd-sample.itinerary</code>
     */
    public static final JItinerary ITINERARY = new JItinerary();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ItineraryRecord> getRecordType() {
        return ItineraryRecord.class;
    }

    /**
     * The column <code>ddd-sample.itinerary.id</code>.
     */
    public final TableField<ItineraryRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>ddd-sample.itinerary.cargo_id</code>.
     */
    public final TableField<ItineraryRecord, Integer> CARGO_ID = createField("cargo_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>ddd-sample.itinerary.leg_id</code>.
     */
    public final TableField<ItineraryRecord, Integer> LEG_ID = createField("leg_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>ddd-sample.itinerary</code> table reference
     */
    public JItinerary() {
        this(DSL.name("itinerary"), null);
    }

    /**
     * Create an aliased <code>ddd-sample.itinerary</code> table reference
     */
    public JItinerary(String alias) {
        this(DSL.name(alias), ITINERARY);
    }

    /**
     * Create an aliased <code>ddd-sample.itinerary</code> table reference
     */
    public JItinerary(Name alias) {
        this(alias, ITINERARY);
    }

    private JItinerary(Name alias, Table<ItineraryRecord> aliased) {
        this(alias, aliased, null);
    }

    private JItinerary(Name alias, Table<ItineraryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> JItinerary(Table<O> child, ForeignKey<O, ItineraryRecord> key) {
        super(child, key, ITINERARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return JDddSample.DDD_SAMPLE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ITINERARY_ITINERARY_IDX_1, Indexes.ITINERARY_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ItineraryRecord, Integer> getIdentity() {
        return Keys.IDENTITY_ITINERARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ItineraryRecord> getPrimaryKey() {
        return Keys.KEY_ITINERARY_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ItineraryRecord>> getKeys() {
        return Arrays.<UniqueKey<ItineraryRecord>>asList(Keys.KEY_ITINERARY_PRIMARY, Keys.KEY_ITINERARY_ITINERARY_IDX_1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JItinerary as(String alias) {
        return new JItinerary(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JItinerary as(Name alias) {
        return new JItinerary(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JItinerary rename(String name) {
        return new JItinerary(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JItinerary rename(Name name) {
        return new JItinerary(name, null);
    }
}
