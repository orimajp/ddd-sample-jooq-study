/*
 * This file is generated by jOOQ.
 */
package com.example.db.jooq.gen.tables;


import com.example.db.jooq.gen.Indexes;
import com.example.db.jooq.gen.JDddSample;
import com.example.db.jooq.gen.Keys;
import com.example.db.jooq.gen.tables.records.LegRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JLeg extends TableImpl<LegRecord> {

    private static final long serialVersionUID = 1803555079;

    /**
     * The reference instance of <code>ddd-sample.leg</code>
     */
    public static final JLeg LEG = new JLeg();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LegRecord> getRecordType() {
        return LegRecord.class;
    }

    /**
     * The column <code>ddd-sample.leg.id</code>.
     */
    public final TableField<LegRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>ddd-sample.leg.load_time</code>.
     */
    public final TableField<LegRecord, Timestamp> LOAD_TIME = createField(DSL.name("load_time"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>ddd-sample.leg.unload_time</code>.
     */
    public final TableField<LegRecord, Timestamp> UNLOAD_TIME = createField(DSL.name("unload_time"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>ddd-sample.leg.voyage_id</code>.
     */
    public final TableField<LegRecord, Integer> VOYAGE_ID = createField(DSL.name("voyage_id"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>ddd-sample.leg.load_location_id</code>.
     */
    public final TableField<LegRecord, Integer> LOAD_LOCATION_ID = createField(DSL.name("load_location_id"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>ddd-sample.leg.unload_location_id</code>.
     */
    public final TableField<LegRecord, Integer> UNLOAD_LOCATION_ID = createField(DSL.name("unload_location_id"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>ddd-sample.leg</code> table reference
     */
    public JLeg() {
        this(DSL.name("leg"), null);
    }

    /**
     * Create an aliased <code>ddd-sample.leg</code> table reference
     */
    public JLeg(String alias) {
        this(DSL.name(alias), LEG);
    }

    /**
     * Create an aliased <code>ddd-sample.leg</code> table reference
     */
    public JLeg(Name alias) {
        this(alias, LEG);
    }

    private JLeg(Name alias, Table<LegRecord> aliased) {
        this(alias, aliased, null);
    }

    private JLeg(Name alias, Table<LegRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> JLeg(Table<O> child, ForeignKey<O, LegRecord> key) {
        super(child, key, LEG);
    }

    @Override
    public Schema getSchema() {
        return JDddSample.DDD_SAMPLE;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.LEG_PRIMARY);
    }

    @Override
    public Identity<LegRecord, Integer> getIdentity() {
        return Keys.IDENTITY_LEG;
    }

    @Override
    public UniqueKey<LegRecord> getPrimaryKey() {
        return Keys.KEY_LEG_PRIMARY;
    }

    @Override
    public List<UniqueKey<LegRecord>> getKeys() {
        return Arrays.<UniqueKey<LegRecord>>asList(Keys.KEY_LEG_PRIMARY);
    }

    @Override
    public JLeg as(String alias) {
        return new JLeg(DSL.name(alias), this);
    }

    @Override
    public JLeg as(Name alias) {
        return new JLeg(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JLeg rename(String name) {
        return new JLeg(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JLeg rename(Name name) {
        return new JLeg(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, Timestamp, Timestamp, Integer, Integer, Integer> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
