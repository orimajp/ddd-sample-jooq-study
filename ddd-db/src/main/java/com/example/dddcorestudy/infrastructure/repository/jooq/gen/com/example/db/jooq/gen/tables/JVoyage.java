/*
 * This file is generated by jOOQ.
 */
package com.example.db.jooq.gen.tables;


import com.example.db.jooq.gen.Indexes;
import com.example.db.jooq.gen.JDddSample;
import com.example.db.jooq.gen.Keys;
import com.example.db.jooq.gen.tables.records.VoyageRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JVoyage extends TableImpl<VoyageRecord> {

    private static final long serialVersionUID = 1365935215;

    /**
     * The reference instance of <code>ddd-sample.voyage</code>
     */
    public static final JVoyage VOYAGE = new JVoyage();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VoyageRecord> getRecordType() {
        return VoyageRecord.class;
    }

    /**
     * The column <code>ddd-sample.voyage.id</code>.
     */
    public final TableField<VoyageRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>ddd-sample.voyage.voyage_number</code>.
     */
    public final TableField<VoyageRecord, String> VOYAGE_NUMBER = createField("voyage_number", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * Create a <code>ddd-sample.voyage</code> table reference
     */
    public JVoyage() {
        this(DSL.name("voyage"), null);
    }

    /**
     * Create an aliased <code>ddd-sample.voyage</code> table reference
     */
    public JVoyage(String alias) {
        this(DSL.name(alias), VOYAGE);
    }

    /**
     * Create an aliased <code>ddd-sample.voyage</code> table reference
     */
    public JVoyage(Name alias) {
        this(alias, VOYAGE);
    }

    private JVoyage(Name alias, Table<VoyageRecord> aliased) {
        this(alias, aliased, null);
    }

    private JVoyage(Name alias, Table<VoyageRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> JVoyage(Table<O> child, ForeignKey<O, VoyageRecord> key) {
        super(child, key, VOYAGE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return JDddSample.DDD_SAMPLE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.VOYAGE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<VoyageRecord, Integer> getIdentity() {
        return Keys.IDENTITY_VOYAGE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<VoyageRecord> getPrimaryKey() {
        return Keys.KEY_VOYAGE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<VoyageRecord>> getKeys() {
        return Arrays.<UniqueKey<VoyageRecord>>asList(Keys.KEY_VOYAGE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JVoyage as(String alias) {
        return new JVoyage(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JVoyage as(Name alias) {
        return new JVoyage(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JVoyage rename(String name) {
        return new JVoyage(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JVoyage rename(Name name) {
        return new JVoyage(name, null);
    }
}
