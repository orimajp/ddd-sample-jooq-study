/*
 * This file is generated by jOOQ.
 */
package com.example.db.jooq.gen.tables;


import com.example.db.jooq.gen.Indexes;
import com.example.db.jooq.gen.JDddSample;
import com.example.db.jooq.gen.Keys;
import com.example.db.jooq.gen.tables.records.VayageRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JVayage extends TableImpl<VayageRecord> {

    private static final long serialVersionUID = -1195668457;

    /**
     * The reference instance of <code>ddd-sample.vayage</code>
     */
    public static final JVayage VAYAGE = new JVayage();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VayageRecord> getRecordType() {
        return VayageRecord.class;
    }

    /**
     * The column <code>ddd-sample.vayage.id</code>.
     */
    public final TableField<VayageRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>ddd-sample.vayage.voyage_number</code>.
     */
    public final TableField<VayageRecord, String> VOYAGE_NUMBER = createField(DSL.name("voyage_number"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * Create a <code>ddd-sample.vayage</code> table reference
     */
    public JVayage() {
        this(DSL.name("vayage"), null);
    }

    /**
     * Create an aliased <code>ddd-sample.vayage</code> table reference
     */
    public JVayage(String alias) {
        this(DSL.name(alias), VAYAGE);
    }

    /**
     * Create an aliased <code>ddd-sample.vayage</code> table reference
     */
    public JVayage(Name alias) {
        this(alias, VAYAGE);
    }

    private JVayage(Name alias, Table<VayageRecord> aliased) {
        this(alias, aliased, null);
    }

    private JVayage(Name alias, Table<VayageRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> JVayage(Table<O> child, ForeignKey<O, VayageRecord> key) {
        super(child, key, VAYAGE);
    }

    @Override
    public Schema getSchema() {
        return JDddSample.DDD_SAMPLE;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.VAYAGE_PRIMARY);
    }

    @Override
    public Identity<VayageRecord, Integer> getIdentity() {
        return Keys.IDENTITY_VAYAGE;
    }

    @Override
    public UniqueKey<VayageRecord> getPrimaryKey() {
        return Keys.KEY_VAYAGE_PRIMARY;
    }

    @Override
    public List<UniqueKey<VayageRecord>> getKeys() {
        return Arrays.<UniqueKey<VayageRecord>>asList(Keys.KEY_VAYAGE_PRIMARY);
    }

    @Override
    public JVayage as(String alias) {
        return new JVayage(DSL.name(alias), this);
    }

    @Override
    public JVayage as(Name alias) {
        return new JVayage(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JVayage rename(String name) {
        return new JVayage(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JVayage rename(Name name) {
        return new JVayage(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
